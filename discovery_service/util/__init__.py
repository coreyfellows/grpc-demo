from itertools import zip_longest
class CodeGenerator(object):
    def __init__(self, print_fn):
        self._prnt_fn = print_fn
        self.indents = 0
        import sys
        self(f"#WARNING: THIS IS GENERATED CODE GENERATED BY {sys.argv[0]}.\n#DO NOT TOUCH, RERUN THE GENERATOR.")

    def indent(self, line=None):
        if line:
            self.print(line)
        return self
    
    def __call__(self, line=''):
        self.print(line)

    def __enter__(self):
        self.indents += 1

    def __exit__(self, type, value, traceback):
        self.indents -= 1

    def print(self, line):
        indent = self.indents * '    '
        line = f'{indent}{line}'
        self._prnt_fn(line)

    def method(self, name, params=[], defaults=None):
        params = list(params)
        params.insert(0, 'self')
        return self.func(name, params, defaults)

    def func(self, name, params=[], defaults=None):
        return self._param_list('def', name, params, defaults)

    def clss(self, name, base=('object',)):
        if isinstance(base, str):
            base = (base, )
        return self._param_list('class', name, base, None)


    def _param_list(self, prefix, name, params=[], defaults = None):
        sig = f'{prefix} {name}('
        if defaults:
            def join_default(param_default):
                param, default = param_default
                if default:
                    return f'{param}={default}'
                return param
            params, defaults = params[::-1], defaults[::-1]
            params = list(map(join_default, zip_longest(params, defaults)))[::-1]

        self.print(sig+format(','.join(params) + '):'))
        return self.indent()